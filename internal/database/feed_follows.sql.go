// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feed_follows.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted_feed_follow AS (
INSERT INTO feed_follows (id, created_at, updated_at, user_id, feed_id)
VALUES (
	$1,
	$2,
	$3,
	$4,
	$5
	)
	RETURNING id, created_at, updated_at, user_id, feed_id
)
SELECT
	inserted_feed_follow.id, inserted_feed_follow.created_at, inserted_feed_follow.updated_at, inserted_feed_follow.user_id, inserted_feed_follow.feed_id,
	f.name AS feed_name,
	u.name AS user_name
FROM inserted_feed_follow
INNER JOIN users u ON u.id = inserted_feed_follow.user_id
INNER JOIN feeds f ON f.id = inserted_feed_follow.feed_id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.NullUUID
	FeedID    uuid.NullUUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.NullUUID
	FeedID    uuid.NullUUID
	FeedName  sql.NullString
	UserName  sql.NullString
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}

const deleteUserFeedFollow = `-- name: DeleteUserFeedFollow :exec
DELETE FROM feed_follows
WHERE id = $1
`

func (q *Queries) DeleteUserFeedFollow(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserFeedFollow, id)
	return err
}

const getUserFeedFollowByUrl = `-- name: GetUserFeedFollowByUrl :one
SELECT ff.id, ff.created_at, ff.updated_at, ff.user_id, ff.feed_id
FROM feed_follows ff
INNER JOIN users u ON u.id = ff.user_id
INNER JOIN feeds f ON f.id = ff.feed_id
WHERE ff.user_id = $1
AND f.url = $2
`

type GetUserFeedFollowByUrlParams struct {
	UserID uuid.NullUUID
	Url    sql.NullString
}

func (q *Queries) GetUserFeedFollowByUrl(ctx context.Context, arg GetUserFeedFollowByUrlParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, getUserFeedFollowByUrl, arg.UserID, arg.Url)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const getUserFeedFollows = `-- name: GetUserFeedFollows :many
SELECT ff.id, ff.created_at, ff.updated_at, ff.user_id, ff.feed_id, u.id, u.created_at, u.updated_at, u.name, f.id, f.created_at, f.updated_at, f.name, f.url, f.user_id, f.last_fetched_at
FROM feed_follows ff
INNER JOIN users u ON u.id = ff.user_id
INNER JOIN feeds f ON f.id = ff.feed_id
WHERE ff.user_id = $1
`

type GetUserFeedFollowsRow struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	UserID        uuid.NullUUID
	FeedID        uuid.NullUUID
	ID_2          uuid.UUID
	CreatedAt_2   time.Time
	UpdatedAt_2   time.Time
	Name          sql.NullString
	ID_3          uuid.UUID
	CreatedAt_3   time.Time
	UpdatedAt_3   time.Time
	Name_2        sql.NullString
	Url           sql.NullString
	UserID_2      uuid.NullUUID
	LastFetchedAt sql.NullTime
}

func (q *Queries) GetUserFeedFollows(ctx context.Context, userID uuid.NullUUID) ([]GetUserFeedFollowsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserFeedFollows, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserFeedFollowsRow
	for rows.Next() {
		var i GetUserFeedFollowsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.Name,
			&i.ID_3,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.Name_2,
			&i.Url,
			&i.UserID_2,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
